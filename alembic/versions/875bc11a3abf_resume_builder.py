"""Resume Builder

Revision ID: 875bc11a3abf
Revises: d9bf6a0819f2
Create Date: 2025-07-04 01:33:25.910685

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '875bc11a3abf'
down_revision: Union[str, Sequence[str], None] = 'd9bf6a0819f2'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False, comment='User email address'),
    sa.Column('username', sa.String(length=50), nullable=True, comment='Unique username (optional)'),
    sa.Column('hashed_password', sa.String(length=255), nullable=False, comment='Hashed password'),
    sa.Column('first_name', sa.String(length=100), nullable=True, comment='User first name'),
    sa.Column('last_name', sa.String(length=100), nullable=True, comment='User last name'),
    sa.Column('phone_number', sa.String(length=20), nullable=True, comment='Phone number'),
    sa.Column('profile_picture_url', sa.String(length=500), nullable=True, comment='Profile picture URL'),
    sa.Column('role', sa.Enum('USER', 'PREMIUM', 'ADMIN', name='role_enum'), nullable=False, comment='User role'),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', 'SUSPENDED', 'PENDING_VERIFICATION', name='status_enum'), nullable=False, comment='Account status'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Account active flag'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment='Email verification status'),
    sa.Column('subscription_type', sa.Enum('FREE', 'BASIC', 'PREMIUM', 'ENTERPRISE', name='subscription_type_enum'), nullable=False, comment='Subscription plan'),
    sa.Column('subscription_expires_at', sa.DateTime(timezone=True), nullable=True, comment='Subscription expiration date'),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True, comment='Last login timestamp'),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), nullable=True, comment='Last activity timestamp'),
    sa.Column('login_count', sa.Integer(), nullable=False, comment='Total login count'),
    sa.Column('job_title', sa.String(length=200), nullable=True, comment='Current job title'),
    sa.Column('company', sa.String(length=200), nullable=True, comment='Current company'),
    sa.Column('industry', sa.String(length=100), nullable=True, comment='Industry'),
    sa.Column('experience_years', sa.Integer(), nullable=True, comment='Years of experience'),
    sa.Column('preferences', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='User preferences as JSON'),
    sa.Column('email_notifications', sa.Boolean(), nullable=False, comment='Email notifications enabled'),
    sa.Column('marketing_emails', sa.Boolean(), nullable=False, comment='Marketing emails enabled'),
    sa.Column('timezone', sa.String(length=50), nullable=False, comment='User timezone'),
    sa.Column('language', sa.String(length=10), nullable=False, comment='Preferred language'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.CheckConstraint('experience_years >= 0 AND experience_years <= 50', name='check_experience_years'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_user_email_status', 'users', ['email', 'status'], unique=False)
    op.create_index('idx_user_role_active', 'users', ['role', 'is_active'], unique=False)
    op.create_index('idx_user_subscription', 'users', ['subscription_type', 'subscription_expires_at'], unique=False)
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_is_active'), 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_is_verified'), 'users', ['is_verified'], unique=False)
    op.create_index(op.f('ix_users_role'), 'users', ['role'], unique=False)
    op.create_index(op.f('ix_users_status'), 'users', ['status'], unique=False)
    op.create_index(op.f('ix_users_subscription_type'), 'users', ['subscription_type'], unique=False)
    op.create_index(op.f('ix_users_updated_at'), 'users', ['updated_at'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('job_descriptions',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User who added this job'),
    sa.Column('title', sa.String(length=200), nullable=False, comment='Job title'),
    sa.Column('company', sa.String(length=200), nullable=False, comment='Company name'),
    sa.Column('location', sa.String(length=200), nullable=True, comment='Job location'),
    sa.Column('job_type', sa.Enum('FULL_TIME', 'PART_TIME', 'CONTRACT', 'TEMPORARY', 'INTERNSHIP', 'FREELANCE', name='job_type_enum'), nullable=False, comment='Type of employment'),
    sa.Column('experience_level', sa.Enum('ENTRY_LEVEL', 'MID_LEVEL', 'SENIOR_LEVEL', 'EXECUTIVE', 'STUDENT', name='experience_level_enum'), nullable=False, comment='Required experience level'),
    sa.Column('remote_type', sa.Enum('ON_SITE', 'REMOTE', 'HYBRID', name='remote_type_enum'), nullable=False, comment='Remote work type'),
    sa.Column('industry', sa.String(length=100), nullable=True, comment='Industry sector'),
    sa.Column('department', sa.String(length=100), nullable=True, comment='Department/Team'),
    sa.Column('salary_min', sa.Integer(), nullable=True, comment='Minimum salary'),
    sa.Column('salary_max', sa.Integer(), nullable=True, comment='Maximum salary'),
    sa.Column('salary_currency', sa.String(length=10), nullable=False, comment='Salary currency'),
    sa.Column('salary_period', sa.String(length=20), nullable=False, comment='Salary period (yearly, monthly, hourly)'),
    sa.Column('description', sa.Text(), nullable=False, comment='Full job description'),
    sa.Column('responsibilities', postgresql.ARRAY(sa.String()), nullable=True, comment='Job responsibilities'),
    sa.Column('requirements', postgresql.ARRAY(sa.String()), nullable=True, comment='Job requirements'),
    sa.Column('nice_to_have', postgresql.ARRAY(sa.String()), nullable=True, comment='Nice to have qualifications'),
    sa.Column('benefits', postgresql.ARRAY(sa.String()), nullable=True, comment='Job benefits'),
    sa.Column('required_skills', postgresql.ARRAY(sa.String()), nullable=True, comment='Required skills'),
    sa.Column('preferred_skills', postgresql.ARRAY(sa.String()), nullable=True, comment='Preferred skills'),
    sa.Column('keywords', postgresql.ARRAY(sa.String()), nullable=True, comment='Important keywords'),
    sa.Column('education_requirements', postgresql.ARRAY(sa.String()), nullable=True, comment='Education requirements'),
    sa.Column('years_experience_min', sa.Integer(), nullable=True, comment='Minimum years of experience'),
    sa.Column('years_experience_max', sa.Integer(), nullable=True, comment='Maximum years of experience'),
    sa.Column('application_url', sa.String(length=500), nullable=True, comment='Application URL'),
    sa.Column('application_email', sa.String(length=255), nullable=True, comment='Application email'),
    sa.Column('application_deadline', sa.DateTime(timezone=True), nullable=True, comment='Application deadline'),
    sa.Column('status', sa.Enum('ACTIVE', 'CLOSED', 'DRAFT', 'EXPIRED', name='status_enum'), nullable=False, comment='Job posting status'),
    sa.Column('posted_date', sa.DateTime(timezone=True), nullable=True, comment='Job posting date'),
    sa.Column('source_url', sa.String(length=500), nullable=True, comment='Original job posting URL'),
    sa.Column('source_platform', sa.String(length=100), nullable=True, comment='Job board/platform'),
    sa.Column('structured_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='AI-extracted structured data'),
    sa.Column('analysis_score', sa.Float(), nullable=True, comment='Job description analysis score'),
    sa.Column('complexity_score', sa.Float(), nullable=True, comment='Job complexity score'),
    sa.Column('last_analyzed_at', sa.DateTime(timezone=True), nullable=True, comment='Last analysis timestamp'),
    sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True, comment='Full-text search vector'),
    sa.Column('view_count', sa.Integer(), nullable=False, comment='Number of views'),
    sa.Column('match_count', sa.Integer(), nullable=False, comment='Number of resume matches'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp'),
    sa.CheckConstraint('analysis_score >= 0 AND analysis_score <= 100', name='check_analysis_score_job'),
    sa.CheckConstraint('complexity_score >= 0 AND complexity_score <= 100', name='check_complexity_score'),
    sa.CheckConstraint('match_count >= 0', name='check_match_count'),
    sa.CheckConstraint('salary_max >= 0', name='check_salary_max'),
    sa.CheckConstraint('salary_max >= salary_min', name='check_salary_range'),
    sa.CheckConstraint('salary_min >= 0', name='check_salary_min'),
    sa.CheckConstraint('view_count >= 0', name='check_view_count'),
    sa.CheckConstraint('years_experience_max >= 0', name='check_experience_max'),
    sa.CheckConstraint('years_experience_max >= years_experience_min', name='check_experience_range'),
    sa.CheckConstraint('years_experience_min >= 0', name='check_experience_min'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_job_company_title', 'job_descriptions', ['company', 'title'], unique=False)
    op.create_index('idx_job_deadline', 'job_descriptions', ['application_deadline'], unique=False)
    op.create_index('idx_job_experience_level', 'job_descriptions', ['experience_level', 'years_experience_min'], unique=False)
    op.create_index('idx_job_industry_type', 'job_descriptions', ['industry', 'job_type'], unique=False)
    op.create_index('idx_job_keywords', 'job_descriptions', ['keywords'], unique=False, postgresql_using='gin')
    op.create_index('idx_job_location_remote', 'job_descriptions', ['location', 'remote_type'], unique=False)
    op.create_index('idx_job_posted_date', 'job_descriptions', ['posted_date'], unique=False)
    op.create_index('idx_job_salary_range', 'job_descriptions', ['salary_min', 'salary_max'], unique=False)
    op.create_index('idx_job_search', 'job_descriptions', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_index('idx_job_skills', 'job_descriptions', ['required_skills'], unique=False, postgresql_using='gin')
    op.create_index('idx_job_user_status', 'job_descriptions', ['user_id', 'status'], unique=False)
    op.create_index(op.f('ix_job_descriptions_created_at'), 'job_descriptions', ['created_at'], unique=False)
    op.create_index(op.f('ix_job_descriptions_deleted_at'), 'job_descriptions', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_job_descriptions_experience_level'), 'job_descriptions', ['experience_level'], unique=False)
    op.create_index(op.f('ix_job_descriptions_is_deleted'), 'job_descriptions', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_job_descriptions_job_type'), 'job_descriptions', ['job_type'], unique=False)
    op.create_index(op.f('ix_job_descriptions_remote_type'), 'job_descriptions', ['remote_type'], unique=False)
    op.create_index(op.f('ix_job_descriptions_status'), 'job_descriptions', ['status'], unique=False)
    op.create_index(op.f('ix_job_descriptions_updated_at'), 'job_descriptions', ['updated_at'], unique=False)
    op.create_index(op.f('ix_job_descriptions_user_id'), 'job_descriptions', ['user_id'], unique=False)
    op.create_table('resume_templates',
    sa.Column('name', sa.String(length=100), nullable=False, comment='Template name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Template description'),
    sa.Column('category', sa.Enum('MODERN', 'CLASSIC', 'CREATIVE', 'TECHNICAL', 'EXECUTIVE', 'ACADEMIC', 'ENTRY_LEVEL', 'MINIMAL', name='category_enum'), nullable=False, comment='Template category'),
    sa.Column('status', sa.Enum('ACTIVE', 'DRAFT', 'DEPRECATED', 'PREMIUM', name='status_enum'), nullable=False, comment='Template status'),
    sa.Column('template_type', sa.Enum('SYSTEM', 'USER_CREATED', 'PREMIUM', 'CUSTOM', name='template_type_enum'), nullable=False, comment='Template type'),
    sa.Column('created_by', sa.UUID(), nullable=True, comment='Template creator (null for system templates)'),
    sa.Column('layout_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Layout configuration'),
    sa.Column('style_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Style configuration (colors, fonts, etc.)'),
    sa.Column('section_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Section configuration and ordering'),
    sa.Column('preview_image_url', sa.String(length=500), nullable=True, comment='Preview image URL'),
    sa.Column('thumbnail_url', sa.String(length=500), nullable=True, comment='Thumbnail image URL'),
    sa.Column('html_template', sa.Text(), nullable=True, comment='HTML template content'),
    sa.Column('css_styles', sa.Text(), nullable=True, comment='CSS styles'),
    sa.Column('version', sa.String(length=20), nullable=False, comment='Template version'),
    sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True, comment='Template tags for filtering'),
    sa.Column('industries', postgresql.ARRAY(sa.String()), nullable=True, comment='Suitable industries'),
    sa.Column('job_levels', postgresql.ARRAY(sa.String()), nullable=True, comment='Suitable job levels'),
    sa.Column('supports_photo', sa.Boolean(), nullable=False, comment='Supports profile photo'),
    sa.Column('supports_colors', sa.Boolean(), nullable=False, comment='Supports color customization'),
    sa.Column('supports_fonts', sa.Boolean(), nullable=False, comment='Supports font customization'),
    sa.Column('is_ats_friendly', sa.Boolean(), nullable=False, comment='ATS-friendly design'),
    sa.Column('max_pages', sa.Integer(), nullable=False, comment='Maximum recommended pages'),
    sa.Column('is_premium', sa.Boolean(), nullable=False, comment='Premium template flag'),
    sa.Column('price', sa.Float(), nullable=True, comment='Template price (if premium)'),
    sa.Column('currency', sa.String(length=10), nullable=False, comment='Price currency'),
    sa.Column('usage_count', sa.Integer(), nullable=False, comment='Number of times used'),
    sa.Column('download_count', sa.Integer(), nullable=False, comment='Number of downloads'),
    sa.Column('rating_average', sa.Float(), nullable=True, comment='Average user rating (1-5)'),
    sa.Column('rating_count', sa.Integer(), nullable=False, comment='Number of ratings'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.CheckConstraint('download_count >= 0', name='check_download_count'),
    sa.CheckConstraint('max_pages > 0 AND max_pages <= 10', name='check_max_pages'),
    sa.CheckConstraint('price >= 0', name='check_price'),
    sa.CheckConstraint('rating_average >= 1 AND rating_average <= 5', name='check_rating_average'),
    sa.CheckConstraint('rating_count >= 0', name='check_rating_count'),
    sa.CheckConstraint('usage_count >= 0', name='check_usage_count'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_template_category_status', 'resume_templates', ['category', 'status'], unique=False)
    op.create_index('idx_template_creator', 'resume_templates', ['created_by'], unique=False)
    op.create_index('idx_template_industries', 'resume_templates', ['industries'], unique=False, postgresql_using='gin')
    op.create_index('idx_template_rating', 'resume_templates', ['rating_average', 'rating_count'], unique=False)
    op.create_index('idx_template_tags', 'resume_templates', ['tags'], unique=False, postgresql_using='gin')
    op.create_index('idx_template_type_premium', 'resume_templates', ['template_type', 'is_premium'], unique=False)
    op.create_index('idx_template_usage', 'resume_templates', ['usage_count'], unique=False)
    op.create_index(op.f('ix_resume_templates_category'), 'resume_templates', ['category'], unique=False)
    op.create_index(op.f('ix_resume_templates_created_at'), 'resume_templates', ['created_at'], unique=False)
    op.create_index(op.f('ix_resume_templates_status'), 'resume_templates', ['status'], unique=False)
    op.create_index(op.f('ix_resume_templates_template_type'), 'resume_templates', ['template_type'], unique=False)
    op.create_index(op.f('ix_resume_templates_updated_at'), 'resume_templates', ['updated_at'], unique=False)
    op.create_table('user_sessions',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User ID'),
    sa.Column('token_hash', sa.String(length=255), nullable=False, comment='Hashed session token'),
    sa.Column('refresh_token_hash', sa.String(length=255), nullable=True, comment='Hashed refresh token'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False, comment='Session expiration time'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Session active status'),
    sa.Column('ip_address', sa.String(length=45), nullable=True, comment='Client IP address'),
    sa.Column('user_agent', sa.Text(), nullable=True, comment='Client user agent'),
    sa.Column('device_info', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Device information'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_session_expires', 'user_sessions', ['expires_at'], unique=False)
    op.create_index('idx_session_user_active', 'user_sessions', ['user_id', 'is_active'], unique=False)
    op.create_index(op.f('ix_user_sessions_created_at'), 'user_sessions', ['created_at'], unique=False)
    op.create_index(op.f('ix_user_sessions_expires_at'), 'user_sessions', ['expires_at'], unique=False)
    op.create_index(op.f('ix_user_sessions_is_active'), 'user_sessions', ['is_active'], unique=False)
    op.create_index(op.f('ix_user_sessions_refresh_token_hash'), 'user_sessions', ['refresh_token_hash'], unique=True)
    op.create_index(op.f('ix_user_sessions_token_hash'), 'user_sessions', ['token_hash'], unique=True)
    op.create_index(op.f('ix_user_sessions_updated_at'), 'user_sessions', ['updated_at'], unique=False)
    op.create_index(op.f('ix_user_sessions_user_id'), 'user_sessions', ['user_id'], unique=False)
    op.create_table('user_verifications',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User ID'),
    sa.Column('verification_token', sa.String(length=255), nullable=False, comment='Verification token'),
    sa.Column('verification_type', sa.String(length=50), nullable=False, comment='Type of verification (email, phone, etc.)'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False, comment='Token expiration time'),
    sa.Column('is_used', sa.Boolean(), nullable=False, comment='Token usage status'),
    sa.Column('used_at', sa.DateTime(timezone=True), nullable=True, comment='Token usage timestamp'),
    sa.Column('attempts', sa.Integer(), nullable=False, comment='Number of verification attempts'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_verification_token_type', 'user_verifications', ['verification_token', 'verification_type'], unique=False)
    op.create_index('idx_verification_user_type', 'user_verifications', ['user_id', 'verification_type'], unique=False)
    op.create_index(op.f('ix_user_verifications_created_at'), 'user_verifications', ['created_at'], unique=False)
    op.create_index(op.f('ix_user_verifications_updated_at'), 'user_verifications', ['updated_at'], unique=False)
    op.create_index(op.f('ix_user_verifications_user_id'), 'user_verifications', ['user_id'], unique=False)
    op.create_index(op.f('ix_user_verifications_verification_token'), 'user_verifications', ['verification_token'], unique=True)
    op.create_table('resumes',
    sa.Column('user_id', sa.UUID(), nullable=False, comment='Owner user ID'),
    sa.Column('title', sa.String(length=200), nullable=False, comment='Resume title/name'),
    sa.Column('description', sa.Text(), nullable=True, comment='Resume description'),
    sa.Column('status', sa.Enum('DRAFT', 'PROCESSING', 'COMPLETED', 'ERROR', 'ARCHIVED', name='status_enum'), nullable=False, comment='Processing status'),
    sa.Column('resume_type', sa.Enum('ORIGINAL', 'OPTIMIZED', 'TEMPLATE_BASED', 'AI_GENERATED', name='resume_type_enum'), nullable=False, comment='Resume type'),
    sa.Column('original_filename', sa.String(length=255), nullable=True, comment='Original uploaded filename'),
    sa.Column('file_path', sa.String(length=500), nullable=True, comment='File storage path'),
    sa.Column('file_size', sa.Integer(), nullable=True, comment='File size in bytes'),
    sa.Column('file_type', sa.String(length=50), nullable=True, comment='MIME type'),
    sa.Column('raw_text', sa.Text(), nullable=True, comment='Extracted raw text content'),
    sa.Column('structured_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Structured resume data'),
    sa.Column('language', sa.String(length=10), nullable=False, comment='Resume language'),
    sa.Column('word_count', sa.Integer(), nullable=True, comment='Total word count'),
    sa.Column('page_count', sa.Integer(), nullable=True, comment='Number of pages'),
    sa.Column('version', sa.String(length=20), nullable=False, comment='Resume version'),
    sa.Column('parent_resume_id', sa.UUID(), nullable=True, comment='Parent resume for versions'),
    sa.Column('template_id', sa.UUID(), nullable=True, comment='Applied template'),
    sa.Column('search_vector', postgresql.TSVECTOR(), nullable=True, comment='Full-text search vector'),
    sa.Column('keywords', postgresql.ARRAY(sa.String()), nullable=True, comment='Extracted keywords'),
    sa.Column('skills', postgresql.ARRAY(sa.String()), nullable=True, comment='Extracted skills'),
    sa.Column('analysis_score', sa.Float(), nullable=True, comment='Overall analysis score (0-100)'),
    sa.Column('ats_score', sa.Float(), nullable=True, comment='ATS compatibility score (0-100)'),
    sa.Column('last_analyzed_at', sa.DateTime(timezone=True), nullable=True, comment='Last analysis timestamp'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.Column('is_deleted', sa.Boolean(), nullable=False, comment='Soft delete flag'),
    sa.Column('deleted_at', sa.DateTime(timezone=True), nullable=True, comment='Soft delete timestamp'),
    sa.CheckConstraint('analysis_score >= 0 AND analysis_score <= 100', name='check_analysis_score'),
    sa.CheckConstraint('ats_score >= 0 AND ats_score <= 100', name='check_ats_score'),
    sa.CheckConstraint('page_count >= 0', name='check_page_count'),
    sa.CheckConstraint('word_count >= 0', name='check_word_count'),
    sa.ForeignKeyConstraint(['parent_resume_id'], ['resumes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['template_id'], ['resume_templates.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_resume_parent', 'resumes', ['parent_resume_id'], unique=False)
    op.create_index('idx_resume_search', 'resumes', ['search_vector'], unique=False, postgresql_using='gin')
    op.create_index('idx_resume_skills', 'resumes', ['skills'], unique=False, postgresql_using='gin')
    op.create_index('idx_resume_type_created', 'resumes', ['resume_type', 'created_at'], unique=False)
    op.create_index('idx_resume_user_status', 'resumes', ['user_id', 'status'], unique=False)
    op.create_index(op.f('ix_resumes_created_at'), 'resumes', ['created_at'], unique=False)
    op.create_index(op.f('ix_resumes_deleted_at'), 'resumes', ['deleted_at'], unique=False)
    op.create_index(op.f('ix_resumes_is_deleted'), 'resumes', ['is_deleted'], unique=False)
    op.create_index(op.f('ix_resumes_resume_type'), 'resumes', ['resume_type'], unique=False)
    op.create_index(op.f('ix_resumes_status'), 'resumes', ['status'], unique=False)
    op.create_index(op.f('ix_resumes_updated_at'), 'resumes', ['updated_at'], unique=False)
    op.create_index(op.f('ix_resumes_user_id'), 'resumes', ['user_id'], unique=False)
    op.create_table('template_customizations',
    sa.Column('template_id', sa.UUID(), nullable=False, comment='Base template ID'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User who customized'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Customization name'),
    sa.Column('color_scheme', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Custom color scheme'),
    sa.Column('font_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Custom font settings'),
    sa.Column('layout_modifications', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Layout modifications'),
    sa.Column('section_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Section-specific settings'),
    sa.Column('custom_css', sa.Text(), nullable=True, comment='Custom CSS overrides'),
    sa.Column('is_active', sa.Boolean(), nullable=False, comment='Customization active status'),
    sa.Column('is_default', sa.Boolean(), nullable=False, comment="User's default customization"),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.ForeignKeyConstraint(['template_id'], ['resume_templates.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_customization_default', 'template_customizations', ['user_id', 'is_default'], unique=False)
    op.create_index('idx_customization_user_template', 'template_customizations', ['user_id', 'template_id'], unique=False)
    op.create_index(op.f('ix_template_customizations_created_at'), 'template_customizations', ['created_at'], unique=False)
    op.create_index(op.f('ix_template_customizations_template_id'), 'template_customizations', ['template_id'], unique=False)
    op.create_index(op.f('ix_template_customizations_updated_at'), 'template_customizations', ['updated_at'], unique=False)
    op.create_index(op.f('ix_template_customizations_user_id'), 'template_customizations', ['user_id'], unique=False)
    op.create_table('template_ratings',
    sa.Column('template_id', sa.UUID(), nullable=False, comment='Template ID'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User who rated'),
    sa.Column('rating', sa.Float(), nullable=False, comment='Rating (1-5)'),
    sa.Column('review', sa.Text(), nullable=True, comment='Written review'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.CheckConstraint('rating >= 1 AND rating <= 5', name='check_rating_value'),
    sa.ForeignKeyConstraint(['template_id'], ['resume_templates.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('template_id', 'user_id', name='uq_template_user_rating')
    )
    op.create_index('idx_rating_template_rating', 'template_ratings', ['template_id', 'rating'], unique=False)
    op.create_index('idx_rating_user', 'template_ratings', ['user_id'], unique=False)
    op.create_index(op.f('ix_template_ratings_created_at'), 'template_ratings', ['created_at'], unique=False)
    op.create_index(op.f('ix_template_ratings_template_id'), 'template_ratings', ['template_id'], unique=False)
    op.create_index(op.f('ix_template_ratings_updated_at'), 'template_ratings', ['updated_at'], unique=False)
    op.create_index(op.f('ix_template_ratings_user_id'), 'template_ratings', ['user_id'], unique=False)
    op.create_table('template_sections',
    sa.Column('template_id', sa.UUID(), nullable=False, comment='Template ID'),
    sa.Column('section_type', sa.String(length=50), nullable=False, comment='Section type'),
    sa.Column('section_name', sa.String(length=100), nullable=False, comment='Display name'),
    sa.Column('order_index', sa.Integer(), nullable=False, comment='Display order'),
    sa.Column('is_required', sa.Boolean(), nullable=False, comment='Required section'),
    sa.Column('is_visible', sa.Boolean(), nullable=False, comment='Visible by default'),
    sa.Column('layout_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Section layout configuration'),
    sa.Column('style_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Section style configuration'),
    sa.Column('field_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Field configuration'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.ForeignKeyConstraint(['template_id'], ['resume_templates.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('template_id', 'section_type', name='uq_template_section_type')
    )
    op.create_index('idx_section_template_order', 'template_sections', ['template_id', 'order_index'], unique=False)
    op.create_index('idx_section_type', 'template_sections', ['section_type'], unique=False)
    op.create_index(op.f('ix_template_sections_created_at'), 'template_sections', ['created_at'], unique=False)
    op.create_index(op.f('ix_template_sections_template_id'), 'template_sections', ['template_id'], unique=False)
    op.create_index(op.f('ix_template_sections_updated_at'), 'template_sections', ['updated_at'], unique=False)
    op.create_table('job_matches',
    sa.Column('resume_id', sa.UUID(), nullable=False, comment='Resume ID'),
    sa.Column('job_description_id', sa.UUID(), nullable=False, comment='Job description ID'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User who initiated the match'),
    sa.Column('overall_match_score', sa.Float(), nullable=False, comment='Overall match score (0-100)'),
    sa.Column('skills_match_score', sa.Float(), nullable=True, comment='Skills match score (0-100)'),
    sa.Column('experience_match_score', sa.Float(), nullable=True, comment='Experience match score (0-100)'),
    sa.Column('education_match_score', sa.Float(), nullable=True, comment='Education match score (0-100)'),
    sa.Column('keyword_match_score', sa.Float(), nullable=True, comment='Keyword match score (0-100)'),
    sa.Column('matched_skills', postgresql.ARRAY(sa.String()), nullable=True, comment='Skills that match'),
    sa.Column('missing_skills', postgresql.ARRAY(sa.String()), nullable=True, comment='Skills missing from resume'),
    sa.Column('matched_keywords', postgresql.ARRAY(sa.String()), nullable=True, comment='Keywords that match'),
    sa.Column('missing_keywords', postgresql.ARRAY(sa.String()), nullable=True, comment='Keywords missing from resume'),
    sa.Column('recommendations', postgresql.ARRAY(sa.String()), nullable=True, comment='Improvement recommendations'),
    sa.Column('match_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Detailed match analysis'),
    sa.Column('status', sa.Enum('ProcessingStatus', name='status_enum'), nullable=False, comment='Match processing status'),
    sa.Column('processing_time', sa.Float(), nullable=True, comment='Match processing time in seconds'),
    sa.Column('ai_model_used', sa.String(length=50), nullable=True, comment='AI model used for matching'),
    sa.Column('is_bookmarked', sa.Boolean(), nullable=False, comment='User bookmarked this match'),
    sa.Column('is_applied', sa.Boolean(), nullable=False, comment='User applied to this job'),
    sa.Column('applied_at', sa.DateTime(timezone=True), nullable=True, comment='Application timestamp'),
    sa.Column('notes', sa.Text(), nullable=True, comment='User notes about this match'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.CheckConstraint('education_match_score >= 0 AND education_match_score <= 100', name='check_education_match_score'),
    sa.CheckConstraint('experience_match_score >= 0 AND experience_match_score <= 100', name='check_experience_match_score'),
    sa.CheckConstraint('keyword_match_score >= 0 AND keyword_match_score <= 100', name='check_keyword_match_score'),
    sa.CheckConstraint('overall_match_score >= 0 AND overall_match_score <= 100', name='check_overall_match_score'),
    sa.CheckConstraint('skills_match_score >= 0 AND skills_match_score <= 100', name='check_skills_match_score'),
    sa.ForeignKeyConstraint(['job_description_id'], ['job_descriptions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['resume_id'], ['resumes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_match_applied', 'job_matches', ['user_id', 'is_applied', 'applied_at'], unique=False)
    op.create_index('idx_match_bookmarked', 'job_matches', ['user_id', 'is_bookmarked'], unique=False)
    op.create_index('idx_match_created', 'job_matches', ['created_at'], unique=False)
    op.create_index('idx_match_resume_job', 'job_matches', ['resume_id', 'job_description_id'], unique=False)
    op.create_index('idx_match_user_score', 'job_matches', ['user_id', 'overall_match_score'], unique=False)
    op.create_index(op.f('ix_job_matches_created_at'), 'job_matches', ['created_at'], unique=False)
    op.create_index(op.f('ix_job_matches_job_description_id'), 'job_matches', ['job_description_id'], unique=False)
    op.create_index(op.f('ix_job_matches_resume_id'), 'job_matches', ['resume_id'], unique=False)
    op.create_index(op.f('ix_job_matches_status'), 'job_matches', ['status'], unique=False)
    op.create_index(op.f('ix_job_matches_updated_at'), 'job_matches', ['updated_at'], unique=False)
    op.create_index(op.f('ix_job_matches_user_id'), 'job_matches', ['user_id'], unique=False)
    op.create_table('resume_analyses',
    sa.Column('resume_id', sa.UUID(), nullable=False, comment='Resume ID'),
    sa.Column('job_description_id', sa.UUID(), nullable=True, comment='Job description ID (if job-specific analysis)'),
    sa.Column('analysis_type', sa.String(length=50), nullable=False, comment='Type of analysis (general, job_match, ats_check, etc.)'),
    sa.Column('overall_score', sa.Float(), nullable=True, comment='Overall score (0-100)'),
    sa.Column('ats_score', sa.Float(), nullable=True, comment='ATS compatibility score (0-100)'),
    sa.Column('content_score', sa.Float(), nullable=True, comment='Content quality score (0-100)'),
    sa.Column('keyword_score', sa.Float(), nullable=True, comment='Keyword optimization score (0-100)'),
    sa.Column('format_score', sa.Float(), nullable=True, comment='Format quality score (0-100)'),
    sa.Column('strengths', postgresql.ARRAY(sa.String()), nullable=True, comment='Identified strengths'),
    sa.Column('weaknesses', postgresql.ARRAY(sa.String()), nullable=True, comment='Areas for improvement'),
    sa.Column('recommendations', postgresql.ARRAY(sa.String()), nullable=True, comment='Improvement recommendations'),
    sa.Column('missing_keywords', postgresql.ARRAY(sa.String()), nullable=True, comment='Missing important keywords'),
    sa.Column('extracted_skills', postgresql.ARRAY(sa.String()), nullable=True, comment='Skills found in resume'),
    sa.Column('analysis_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Detailed analysis results'),
    sa.Column('processing_time', sa.Float(), nullable=True, comment='Analysis processing time in seconds'),
    sa.Column('ai_model_used', sa.String(length=50), nullable=True, comment='AI model used for analysis'),
    sa.Column('status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELLED', name='status_enum'), nullable=False, comment='Analysis processing status'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if analysis failed'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.CheckConstraint('ats_score >= 0 AND ats_score <= 100', name='check_ats_score_analysis'),
    sa.CheckConstraint('content_score >= 0 AND content_score <= 100', name='check_content_score'),
    sa.CheckConstraint('format_score >= 0 AND format_score <= 100', name='check_format_score'),
    sa.CheckConstraint('keyword_score >= 0 AND keyword_score <= 100', name='check_keyword_score'),
    sa.CheckConstraint('overall_score >= 0 AND overall_score <= 100', name='check_overall_score'),
    sa.ForeignKeyConstraint(['job_description_id'], ['job_descriptions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['resume_id'], ['resumes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_analysis_job_resume', 'resume_analyses', ['job_description_id', 'resume_id'], unique=False)
    op.create_index('idx_analysis_resume_type', 'resume_analyses', ['resume_id', 'analysis_type'], unique=False)
    op.create_index('idx_analysis_status_created', 'resume_analyses', ['status', 'created_at'], unique=False)
    op.create_index(op.f('ix_resume_analyses_created_at'), 'resume_analyses', ['created_at'], unique=False)
    op.create_index(op.f('ix_resume_analyses_job_description_id'), 'resume_analyses', ['job_description_id'], unique=False)
    op.create_index(op.f('ix_resume_analyses_resume_id'), 'resume_analyses', ['resume_id'], unique=False)
    op.create_index(op.f('ix_resume_analyses_status'), 'resume_analyses', ['status'], unique=False)
    op.create_index(op.f('ix_resume_analyses_updated_at'), 'resume_analyses', ['updated_at'], unique=False)
    op.create_table('resume_exports',
    sa.Column('resume_id', sa.UUID(), nullable=False, comment='Resume ID'),
    sa.Column('user_id', sa.UUID(), nullable=False, comment='User who exported'),
    sa.Column('export_format', sa.String(length=20), nullable=False, comment='Export format (pdf, docx, json)'),
    sa.Column('template_id', sa.UUID(), nullable=True, comment='Template used for export'),
    sa.Column('file_path', sa.String(length=500), nullable=True, comment='Exported file path'),
    sa.Column('file_size', sa.Integer(), nullable=True, comment='Exported file size'),
    sa.Column('download_url', sa.String(length=500), nullable=True, comment='Download URL'),
    sa.Column('export_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Export configuration'),
    sa.Column('status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELLED', name='status_enum'), nullable=False, comment='Export processing status'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True, comment='Export start time'),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True, comment='Export completion time'),
    sa.Column('processing_time', sa.Float(), nullable=True, comment='Export processing time in seconds'),
    sa.Column('download_count', sa.Integer(), nullable=False, comment='Number of downloads'),
    sa.Column('last_downloaded_at', sa.DateTime(timezone=True), nullable=True, comment='Last download timestamp'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='Export expiration time'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if export failed'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.CheckConstraint('download_count >= 0', name='check_download_count'),
    sa.ForeignKeyConstraint(['resume_id'], ['resumes.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['template_id'], ['resume_templates.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_index('idx_export_expires', 'resume_exports', ['expires_at'], unique=False)
    op.create_index('idx_export_status_created', 'resume_exports', ['status', 'created_at'], unique=False)
    op.create_index('idx_export_user_format', 'resume_exports', ['user_id', 'export_format'], unique=False)
    op.create_index(op.f('ix_resume_exports_created_at'), 'resume_exports', ['created_at'], unique=False)
    op.create_index(op.f('ix_resume_exports_resume_id'), 'resume_exports', ['resume_id'], unique=False)
    op.create_index(op.f('ix_resume_exports_status'), 'resume_exports', ['status'], unique=False)
    op.create_index(op.f('ix_resume_exports_updated_at'), 'resume_exports', ['updated_at'], unique=False)
    op.create_index(op.f('ix_resume_exports_user_id'), 'resume_exports', ['user_id'], unique=False)
    op.create_table('resume_sections',
    sa.Column('resume_id', sa.UUID(), nullable=False, comment='Resume ID'),
    sa.Column('section_type', sa.String(length=50), nullable=False, comment='Section type (personal_info, experience, education, etc.)'),
    sa.Column('title', sa.String(length=200), nullable=False, comment='Section title'),
    sa.Column('content', sa.Text(), nullable=True, comment='Section content'),
    sa.Column('structured_content', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Structured section data'),
    sa.Column('order_index', sa.Integer(), nullable=False, comment='Display order'),
    sa.Column('is_visible', sa.Boolean(), nullable=False, comment='Section visibility'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record creation timestamp'),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Record last update timestamp'),
    sa.Column('id', sa.UUID(), nullable=False, comment='Unique identifier'),
    sa.ForeignKeyConstraint(['resume_id'], ['resumes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('resume_id', 'section_type', name='uq_resume_section_type')
    )
    op.create_index('idx_section_resume_order', 'resume_sections', ['resume_id', 'order_index'], unique=False)
    op.create_index('idx_section_type_visible', 'resume_sections', ['section_type', 'is_visible'], unique=False)
    op.create_index(op.f('ix_resume_sections_created_at'), 'resume_sections', ['created_at'], unique=False)
    op.create_index(op.f('ix_resume_sections_resume_id'), 'resume_sections', ['resume_id'], unique=False)
    op.create_index(op.f('ix_resume_sections_updated_at'), 'resume_sections', ['updated_at'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_resume_sections_updated_at'), table_name='resume_sections')
    op.drop_index(op.f('ix_resume_sections_resume_id'), table_name='resume_sections')
    op.drop_index(op.f('ix_resume_sections_created_at'), table_name='resume_sections')
    op.drop_index('idx_section_type_visible', table_name='resume_sections')
    op.drop_index('idx_section_resume_order', table_name='resume_sections')
    op.drop_table('resume_sections')
    op.drop_index(op.f('ix_resume_exports_user_id'), table_name='resume_exports')
    op.drop_index(op.f('ix_resume_exports_updated_at'), table_name='resume_exports')
    op.drop_index(op.f('ix_resume_exports_status'), table_name='resume_exports')
    op.drop_index(op.f('ix_resume_exports_resume_id'), table_name='resume_exports')
    op.drop_index(op.f('ix_resume_exports_created_at'), table_name='resume_exports')
    op.drop_index('idx_export_user_format', table_name='resume_exports')
    op.drop_index('idx_export_status_created', table_name='resume_exports')
    op.drop_index('idx_export_expires', table_name='resume_exports')
    op.drop_table('resume_exports')
    op.drop_index(op.f('ix_resume_analyses_updated_at'), table_name='resume_analyses')
    op.drop_index(op.f('ix_resume_analyses_status'), table_name='resume_analyses')
    op.drop_index(op.f('ix_resume_analyses_resume_id'), table_name='resume_analyses')
    op.drop_index(op.f('ix_resume_analyses_job_description_id'), table_name='resume_analyses')
    op.drop_index(op.f('ix_resume_analyses_created_at'), table_name='resume_analyses')
    op.drop_index('idx_analysis_status_created', table_name='resume_analyses')
    op.drop_index('idx_analysis_resume_type', table_name='resume_analyses')
    op.drop_index('idx_analysis_job_resume', table_name='resume_analyses')
    op.drop_table('resume_analyses')
    op.drop_index(op.f('ix_job_matches_user_id'), table_name='job_matches')
    op.drop_index(op.f('ix_job_matches_updated_at'), table_name='job_matches')
    op.drop_index(op.f('ix_job_matches_status'), table_name='job_matches')
    op.drop_index(op.f('ix_job_matches_resume_id'), table_name='job_matches')
    op.drop_index(op.f('ix_job_matches_job_description_id'), table_name='job_matches')
    op.drop_index(op.f('ix_job_matches_created_at'), table_name='job_matches')
    op.drop_index('idx_match_user_score', table_name='job_matches')
    op.drop_index('idx_match_resume_job', table_name='job_matches')
    op.drop_index('idx_match_created', table_name='job_matches')
    op.drop_index('idx_match_bookmarked', table_name='job_matches')
    op.drop_index('idx_match_applied', table_name='job_matches')
    op.drop_table('job_matches')
    op.drop_index(op.f('ix_template_sections_updated_at'), table_name='template_sections')
    op.drop_index(op.f('ix_template_sections_template_id'), table_name='template_sections')
    op.drop_index(op.f('ix_template_sections_created_at'), table_name='template_sections')
    op.drop_index('idx_section_type', table_name='template_sections')
    op.drop_index('idx_section_template_order', table_name='template_sections')
    op.drop_table('template_sections')
    op.drop_index(op.f('ix_template_ratings_user_id'), table_name='template_ratings')
    op.drop_index(op.f('ix_template_ratings_updated_at'), table_name='template_ratings')
    op.drop_index(op.f('ix_template_ratings_template_id'), table_name='template_ratings')
    op.drop_index(op.f('ix_template_ratings_created_at'), table_name='template_ratings')
    op.drop_index('idx_rating_user', table_name='template_ratings')
    op.drop_index('idx_rating_template_rating', table_name='template_ratings')
    op.drop_table('template_ratings')
    op.drop_index(op.f('ix_template_customizations_user_id'), table_name='template_customizations')
    op.drop_index(op.f('ix_template_customizations_updated_at'), table_name='template_customizations')
    op.drop_index(op.f('ix_template_customizations_template_id'), table_name='template_customizations')
    op.drop_index(op.f('ix_template_customizations_created_at'), table_name='template_customizations')
    op.drop_index('idx_customization_user_template', table_name='template_customizations')
    op.drop_index('idx_customization_default', table_name='template_customizations')
    op.drop_table('template_customizations')
    op.drop_index(op.f('ix_resumes_user_id'), table_name='resumes')
    op.drop_index(op.f('ix_resumes_updated_at'), table_name='resumes')
    op.drop_index(op.f('ix_resumes_status'), table_name='resumes')
    op.drop_index(op.f('ix_resumes_resume_type'), table_name='resumes')
    op.drop_index(op.f('ix_resumes_is_deleted'), table_name='resumes')
    op.drop_index(op.f('ix_resumes_deleted_at'), table_name='resumes')
    op.drop_index(op.f('ix_resumes_created_at'), table_name='resumes')
    op.drop_index('idx_resume_user_status', table_name='resumes')
    op.drop_index('idx_resume_type_created', table_name='resumes')
    op.drop_index('idx_resume_skills', table_name='resumes', postgresql_using='gin')
    op.drop_index('idx_resume_search', table_name='resumes', postgresql_using='gin')
    op.drop_index('idx_resume_parent', table_name='resumes')
    op.drop_table('resumes')
    op.drop_index(op.f('ix_user_verifications_verification_token'), table_name='user_verifications')
    op.drop_index(op.f('ix_user_verifications_user_id'), table_name='user_verifications')
    op.drop_index(op.f('ix_user_verifications_updated_at'), table_name='user_verifications')
    op.drop_index(op.f('ix_user_verifications_created_at'), table_name='user_verifications')
    op.drop_index('idx_verification_user_type', table_name='user_verifications')
    op.drop_index('idx_verification_token_type', table_name='user_verifications')
    op.drop_table('user_verifications')
    op.drop_index(op.f('ix_user_sessions_user_id'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_updated_at'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_token_hash'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_refresh_token_hash'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_is_active'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_expires_at'), table_name='user_sessions')
    op.drop_index(op.f('ix_user_sessions_created_at'), table_name='user_sessions')
    op.drop_index('idx_session_user_active', table_name='user_sessions')
    op.drop_index('idx_session_expires', table_name='user_sessions')
    op.drop_table('user_sessions')
    op.drop_index(op.f('ix_resume_templates_updated_at'), table_name='resume_templates')
    op.drop_index(op.f('ix_resume_templates_template_type'), table_name='resume_templates')
    op.drop_index(op.f('ix_resume_templates_status'), table_name='resume_templates')
    op.drop_index(op.f('ix_resume_templates_created_at'), table_name='resume_templates')
    op.drop_index(op.f('ix_resume_templates_category'), table_name='resume_templates')
    op.drop_index('idx_template_usage', table_name='resume_templates')
    op.drop_index('idx_template_type_premium', table_name='resume_templates')
    op.drop_index('idx_template_tags', table_name='resume_templates', postgresql_using='gin')
    op.drop_index('idx_template_rating', table_name='resume_templates')
    op.drop_index('idx_template_industries', table_name='resume_templates', postgresql_using='gin')
    op.drop_index('idx_template_creator', table_name='resume_templates')
    op.drop_index('idx_template_category_status', table_name='resume_templates')
    op.drop_table('resume_templates')
    op.drop_index(op.f('ix_job_descriptions_user_id'), table_name='job_descriptions')
    op.drop_index(op.f('ix_job_descriptions_updated_at'), table_name='job_descriptions')
    op.drop_index(op.f('ix_job_descriptions_status'), table_name='job_descriptions')
    op.drop_index(op.f('ix_job_descriptions_remote_type'), table_name='job_descriptions')
    op.drop_index(op.f('ix_job_descriptions_job_type'), table_name='job_descriptions')
    op.drop_index(op.f('ix_job_descriptions_is_deleted'), table_name='job_descriptions')
    op.drop_index(op.f('ix_job_descriptions_experience_level'), table_name='job_descriptions')
    op.drop_index(op.f('ix_job_descriptions_deleted_at'), table_name='job_descriptions')
    op.drop_index(op.f('ix_job_descriptions_created_at'), table_name='job_descriptions')
    op.drop_index('idx_job_user_status', table_name='job_descriptions')
    op.drop_index('idx_job_skills', table_name='job_descriptions', postgresql_using='gin')
    op.drop_index('idx_job_search', table_name='job_descriptions', postgresql_using='gin')
    op.drop_index('idx_job_salary_range', table_name='job_descriptions')
    op.drop_index('idx_job_posted_date', table_name='job_descriptions')
    op.drop_index('idx_job_location_remote', table_name='job_descriptions')
    op.drop_index('idx_job_keywords', table_name='job_descriptions', postgresql_using='gin')
    op.drop_index('idx_job_industry_type', table_name='job_descriptions')
    op.drop_index('idx_job_experience_level', table_name='job_descriptions')
    op.drop_index('idx_job_deadline', table_name='job_descriptions')
    op.drop_index('idx_job_company_title', table_name='job_descriptions')
    op.drop_table('job_descriptions')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_updated_at'), table_name='users')
    op.drop_index(op.f('ix_users_subscription_type'), table_name='users')
    op.drop_index(op.f('ix_users_status'), table_name='users')
    op.drop_index(op.f('ix_users_role'), table_name='users')
    op.drop_index(op.f('ix_users_is_verified'), table_name='users')
    op.drop_index(op.f('ix_users_is_active'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_index('idx_user_subscription', table_name='users')
    op.drop_index('idx_user_role_active', table_name='users')
    op.drop_index('idx_user_email_status', table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
