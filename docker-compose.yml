version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: ai_resume_builder
      POSTGRES_USER: ai_resume_user
      POSTGRES_PASSWORD: secure_password_123
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ai_resume_user -d ai_resume_builder"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # FastAPI Application
  api:
    build: .
    restart: unless-stopped
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql+asyncpg://ai_resume_user:secure_password_123@db:5432/ai_resume_builder
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-super-secret-key-for-development
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
    volumes:
      - ./static/uploads:/app/static/uploads
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Celery Worker for Background Tasks
  worker:
    build: .
    restart: unless-stopped
    command: celery -A app.workers.celery_app worker --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://ai_resume_user:secure_password_123@db:5432/ai_resume_builder
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-for-development
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - ./static/uploads:/app/static/uploads
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Beat Scheduler
  scheduler:
    build: .
    restart: unless-stopped
    command: celery -A app.workers.celery_app beat --loglevel=info
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql+asyncpg://ai_resume_user:secure_password_123@db:5432/ai_resume_builder
      - REDIS_URL=redis://redis:6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-for-development
    volumes:
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./static:/var/www/static
    depends_on:
      - api
    profiles:
      - production

  # pgAdmin for Database Management (Development only)
  pgadmin:
    image: dpage/pgadmin4
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - db
    profiles:
      - development

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:

networks:
  default:
    name: ai-resume-builder-network